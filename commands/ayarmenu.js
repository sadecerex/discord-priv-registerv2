const { ActionRowBuilder, StringSelectMenuBuilder, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const fs = require('fs');
const path = require('path');

module.exports = {
  name: 'ayarmenÃ¼',
  description: 'Config ayarlarÄ±nÄ± menÃ¼ ile deÄŸiÅŸtirir.',
  async execute(interaction) {
    if (!interaction.member.permissions.has('ADMINISTRATOR')) {
      return interaction.reply({ content: 'Bu komutu kullanmak iÃ§in yÃ¶netici olmalÄ±sÄ±nÄ±z!', ephemeral: true });
    }

    const options = [
      { label: "Ã–n eki deÄŸiÅŸtir", value: "prefix" },
      { label: "Botun aktivitesini deÄŸiÅŸtir", value: "Aktivite" },
      { label: "Twitch URL deÄŸiÅŸtir", value: "AktiviteURL" },
      { label: "KayÄ±tlÄ± rolÃ¼nÃ¼ deÄŸiÅŸtir", value: "kayitli" },
      { label: "KayÄ±tsÄ±z rolÃ¼nÃ¼ deÄŸiÅŸtir", value: "kayitsiz" },
      { label: "VIP rolÃ¼nÃ¼ deÄŸiÅŸtir", value: "vip" },
      { label: "Yetkili rolÃ¼nÃ¼ deÄŸiÅŸtir", value: "rexstaff" },
      { label: "Ucube rolÃ¼nÃ¼ deÄŸiÅŸtir", value: "ucube" },
      { label: "Booster rolÃ¼nÃ¼ deÄŸiÅŸtir", value: "booster" },
      { label: "Emoji deÄŸiÅŸtir", value: "emojitik" },
      { label: "Ucube GIF deÄŸiÅŸtir", value: "ucubegif" },
      { label: "YardÄ±m menÃ¼sÃ¼ GIF", value: "rexhelpgif" },
      { label: "Footer deÄŸiÅŸtir", value: "rexfooter" },
      { label: "Denetim logu deÄŸiÅŸtir", value: "denetimlog" },
      { label: "Rol MenÃ¼sÃ¼ 1", value: "rolver1" },
      { label: "Rol MenÃ¼sÃ¼ 2", value: "rolver2" },
      { label: "Rol MenÃ¼sÃ¼ 3", value: "rolver3" },
      { label: "Rol MenÃ¼sÃ¼ 4", value: "rolver4" },
      { label: "Rol MenÃ¼sÃ¼ 5", value: "rolver5" },
      { label: "Rol MenÃ¼sÃ¼ 6", value: "rolver6" },
    ];

    const menu = new StringSelectMenuBuilder()
      .setCustomId('ayarMenuSec')
      .setPlaceholder('Bir ayar seÃ§in')
      .addOptions(options);

    const row = new ActionRowBuilder().addComponents(menu);

    const embed = new EmbedBuilder()
      .setTitle('ðŸ”§ Ayar MenÃ¼sÃ¼')
      .setDescription('AÅŸaÄŸÄ±dan bir ayar seÃ§erek gÃ¼ncelleyebilirsiniz.')
      .setColor('#5865F2');

    await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
  },

  async selectHandler(interaction) {
    const selectedKey = interaction.values[0];
    const modal = new ModalBuilder()
      .setCustomId(`configModal-${selectedKey}`)
      .setTitle(`ðŸ”§ ${selectedKey} AyarÄ±`);

    const textInput = new TextInputBuilder()
      .setCustomId('configValue')
      .setLabel(`${selectedKey} iÃ§in yeni deÄŸer girin:`)
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const row = new ActionRowBuilder().addComponents(textInput);
    modal.addComponents(row);

    await interaction.showModal(modal);

    try {
      const modalInteraction = await interaction.awaitModalSubmit({
        filter: (i) => i.customId.startsWith('configModal') && i.user.id === interaction.user.id,
        time: 60000,
      });

      if (!modalInteraction) {
        throw new Error('Modal submission not received or timed out.');
      }

      const configPath = path.resolve(__dirname, '../config.json');
      const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));

      const newValue = modalInteraction.fields.getTextInputValue('configValue');
      config[selectedKey] = newValue;

      fs.writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf-8');

      await modalInteraction.reply({
        content: `âœ… \`${selectedKey}\` baÅŸarÄ±yla gÃ¼ncellendi: \`${newValue}\``,
        ephemeral: true,
      });

    
    } catch (err) {
      
      console.log(`Ayar GÃ¼ncellendi ... Restart AtmayÄ± Unutma`)
    }
  },
};
